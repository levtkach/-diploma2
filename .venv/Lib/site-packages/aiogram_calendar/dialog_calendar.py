import calendar
from datetime import datetime, timedelta

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from aiogram.types import CallbackQuery


# setting callback_data prefix and parts
calendar_callback = CallbackData('dialog_calendar', 'act', 'year', 'month', 'day', 'hour', 'minute')
ignore_callback = calendar_callback.new("IGNORE", -1, -1, -1, -1, -1) 

class DialogCalendar:
    months = ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"]

    def __init__(self, year: int = datetime.now().year, month: int = datetime.now().month):
        self.year = year
        self.month = month
        self.select_time = True  

    async def start_calendar(
        self,
        year: int = datetime.now().year,
        select_time: bool = True 
    ) -> InlineKeyboardMarkup:
        self.select_time = select_time
        if select_time:
            return await self._get_month_kb_with_time(year)
        else:
            return await self._get_month_kb(year)

    async def _get_month_kb(self, year: int):
        inline_kb = InlineKeyboardMarkup(row_width=6)
        # first row with year button
        inline_kb.row()
        inline_kb.insert(InlineKeyboardButton(" ", callback_data=ignore_callback))
        inline_kb.insert(InlineKeyboardButton(
            str(year),
            callback_data=calendar_callback.new("START", year, -1, -1, -1, -1)
        ))
        inline_kb.insert(InlineKeyboardButton(" ", callback_data=ignore_callback))
        # two rows with 6 months buttons
        inline_kb.row()
        for month in self.months[0:6]:
            inline_kb.insert(InlineKeyboardButton(
                month,
                callback_data=calendar_callback.new("SET-MONTH", year, self.months.index(month) + 1, -1, -1, -1)
            ))
        inline_kb.row()
        for month in self.months[6:12]:
            inline_kb.insert(InlineKeyboardButton(
                month,
                callback_data=calendar_callback.new("SET-MONTH", year, self.months.index(month) + 1, -1, -1, -1)
            ))
        return inline_kb

    async def _get_month_kb_with_time(self, year: int):
        inline_kb = await self._get_month_kb(year)
        # Additional button for time selection
        inline_kb.row()
        inline_kb.insert(InlineKeyboardButton("Выбрать время", callback_data=calendar_callback.new("SET-TIME", year, -1, -1, -1, -1)))
        return inline_kb

    async def _get_days_kb(self, year: int, month: int):
        inline_kb = InlineKeyboardMarkup(row_width=7)
        inline_kb.row()
        inline_kb.insert(InlineKeyboardButton(
            str(year),
            callback_data=calendar_callback.new("START", year, -1, -1, -1, -1)
        ))
        inline_kb.insert(InlineKeyboardButton(
            self.months[month - 1],
            callback_data=calendar_callback.new("SET-YEAR", year, -1, -1, -1, -1)
        ))
        inline_kb.row()
        for day in ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"]:
            inline_kb.insert(InlineKeyboardButton(day, callback_data=ignore_callback))

        month_calendar = calendar.monthcalendar(year, month)
        for week in month_calendar:
            inline_kb.row()
            for day in week:
                if(day == 0):
                    inline_kb.insert(InlineKeyboardButton(" ", callback_data=ignore_callback))
                    continue
                inline_kb.insert(InlineKeyboardButton(
                    str(day), callback_data=calendar_callback.new("SET-DAY", year, month, day, -1, -1)
                ))
        return inline_kb

    async def _get_time_kb(self, year: int, month: int, day: int):
        inline_kb = InlineKeyboardMarkup(row_width=4)
        inline_kb.row()
        inline_kb.insert(InlineKeyboardButton(f"{day}/{month}/{year}", callback_data=ignore_callback))
        inline_kb.row()
        for hour in range(6, 24):
            inline_kb.insert(InlineKeyboardButton(
                f"{hour:02d}", callback_data=calendar_callback.new("SET-HOUR", year, month, day, hour, 0)
            ))
        return inline_kb

    async def _get_minutes_kb(self, year: int, month: int, day: int, hour: int):
        inline_kb = InlineKeyboardMarkup(row_width=4)
        inline_kb.row()
        inline_kb.insert(InlineKeyboardButton(f"{day}/{month}/{year} {hour:02d}:00", callback_data=ignore_callback))
        inline_kb.row()
        for minute in [0, 15, 30, 45]:
            inline_kb.insert(InlineKeyboardButton(
                f"{hour:02d}:{minute:02d}", callback_data=calendar_callback.new("SET-MINUTE", year, month, day, hour, minute)
            ))
        return inline_kb

    async def process_selection(self, query: CallbackQuery, data: dict) -> tuple:
        return_data = (False, None)
        if data['act'] == "IGNORE":
            await query.answer(cache_time=60)
        if data['act'] == "SET-YEAR":
            if self.select_time:
                await query.message.edit_reply_markup(await self._get_month_kb_with_time(int(data['year'])))
            else:
                await query.message.edit_reply_markup(await self._get_month_kb(int(data['year'])))
        if data['act'] == "PREV-YEARS":
            new_year = int(data['year']) - 5
            await query.message.edit_reply_markup(await self.start_calendar(new_year, self.select_time))
        if data['act'] == "NEXT-YEARS":
            new_year = int(data['year']) + 5
            await query.message.edit_reply_markup(await self.start_calendar(new_year, self.select_time))
        if data['act'] == "START":
            if self.select_time:
                await query.message.edit_reply_markup(await self._get_month_kb_with_time(int(data['year'])))
            else:
                await query.message.edit_reply_markup(await self.start_calendar(int(data['year']), self.select_time))
        if data['act'] == "SET-MONTH":
            await query.message.edit_reply_markup(await self._get_days_kb(int(data['year']), int(data['month'])))
        if data['act'] == "SET-DAY":
            if self.select_time:
                await query.message.edit_reply_markup(await self._get_time_kb(int(data['year']), int(data['month']), int(data['day'])))
            else:
                await query.message.edit_reply_markup(InlineKeyboardMarkup())  # Remove inline keyboard
                return_data = True, datetime(int(data['year']), int(data['month']), int(data['day']))
        if data['act'] == "SET-TIME":
            await query.message.edit_reply_markup(await self._get_time_kb(int(data['year']), int(data['month']), int(data['day'])))
        if data['act'] == "SET-HOUR":
            await query.message.edit_reply_markup(await self._get_minutes_kb(int(data['year']), int(data['month']), int(data['day']), int(data['hour'])))
        if data['act'] == "SET-MINUTE":
            await query.message.delete_reply_markup()   # removing inline keyboard
            return_data = True, datetime(int(data['year']), int(data['month']), int(data['day']), int(data['hour']), int(data['minute']))
        return return_data


class DateDialogCalendar:
    months = ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"]

    def __init__(self, year: int = datetime.now().year, month: int = datetime.now().month):
        self.year = year
        self.month = month

    async def start_calendar(self, year: int = datetime.now().year) -> InlineKeyboardMarkup:
        return await self._get_month_kb(year)

    async def _get_month_kb(self, year: int):
        inline_kb = InlineKeyboardMarkup(row_width=6)
        inline_kb.row()
        inline_kb.insert(InlineKeyboardButton(" ", callback_data=ignore_callback))
        inline_kb.insert(InlineKeyboardButton(
            str(year),
            callback_data=calendar_callback.new("START", year, -1, -1, -1, -1)
        ))
        inline_kb.insert(InlineKeyboardButton(" ", callback_data=ignore_callback))
        inline_kb.row()
        for month in self.months[0:6]:
            inline_kb.insert(InlineKeyboardButton(
                month,
                callback_data=calendar_callback.new("SET-MONTH", year, self.months.index(month) + 1, -1, -1, -1)
            ))
        inline_kb.row()
        for month in self.months[6:12]:
            inline_kb.insert(InlineKeyboardButton(
                month,
                callback_data=calendar_callback.new("SET-MONTH", year, self.months.index(month) + 1, -1, -1, -1)
            ))
        return inline_kb

    async def _get_days_kb(self, year: int, month: int):
        inline_kb = InlineKeyboardMarkup(row_width=7)
        inline_kb.row()
        inline_kb.insert(InlineKeyboardButton(
            str(year),
            callback_data=calendar_callback.new("START", year, -1, -1, -1, -1)
        ))
        inline_kb.insert(InlineKeyboardButton(
            self.months[month - 1],
            callback_data=calendar_callback.new("SET-YEAR", year, -1, -1, -1, -1)
        ))
        inline_kb.row()
        for day in ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"]:
            inline_kb.insert(InlineKeyboardButton(day, callback_data=ignore_callback))

        month_calendar = calendar.monthcalendar(year, month)
        for week in month_calendar:
            inline_kb.row()
            for day in week:
                if(day == 0):
                    inline_kb.insert(InlineKeyboardButton(" ", callback_data=ignore_callback))
                    continue
                inline_kb.insert(InlineKeyboardButton(
                    str(day), callback_data=calendar_callback.new("SET-DAY", year, month, day, -1, -1)
                ))
        return inline_kb

    async def process_selection(self, query: CallbackQuery, data: dict) -> tuple:
        return_data = (False, None)
        if data['act'] == "IGNORE":
            await query.answer(cache_time=60)
        if data['act'] == "SET-YEAR":
            await query.message.edit_reply_markup(await self._get_month_kb(int(data['year'])))
        if data['act'] == "PREV-YEARS":
            new_year = int(data['year']) - 5
            await query.message.edit_reply_markup(await self.start_calendar(new_year))
        if data['act'] == "NEXT-YEARS":
            new_year = int(data['year']) + 5
            await query.message.edit_reply_markup(await self.start_calendar(new_year))
        if data['act'] == "START":
            await query.message.edit_reply_markup(await self.start_calendar(int(data['year'])))
        if data['act'] == "SET-MONTH":
            await query.message.edit_reply_markup(await self._get_days_kb(int(data['year']), int(data['month'])))
        if data['act'] == "SET-DAY":
            await query.message.edit_reply_markup(InlineKeyboardMarkup())  # Remove inline keyboard
            return_data = True, datetime(int(data['year']), int(data['month']), int(data['day']))
        return return_data